fundle-package(1) -- Package your needed `.gem` files into your application
===========================================================================

## SYNOPSIS

`fundle package`

## DESCRIPTION

Copy all of the `.gem` files needed to run the application into the
`vendor/cache` directory. In the future, when running [fundle install(1)][fundle-install],
use the gems in the cache in preference to the ones on `rubygems.org`.

## GIT AND PATH GEMS

In Fundler 1.0, the `fundle package` command only packages `.gem` files,
not gems specified using the `:git` or `:path` options. This will likely
change in the future.

## REMOTE FETCHING

By default, if you simply run [fundle install(1)][fundle-install] after running
[fundle package(1)][fundle-package], fundler will still connect to `rubygems.org`
to check whether a platform-specific gem exists for any of the gems
in `vendor/cache`.

For instance, consider this Gemfile(5):

    source "http://rubygems.org"

    gem "nokogiri"

If you run `fundle package` under C Ruby, fundler will retrieve
the version of `nokogiri` for the `"ruby"` platform. If you deploy
to JRuby and run `fundle install`, fundler is forced to check to
see whether a `"java"` platformed `nokogiri` exists.

Even though the `nokogiri` gem for the Ruby platform is
_technically_ acceptable on JRuby, it actually has a C extension
that does not run on JRuby. As a result, fundler will, by default,
still connect to `rubygems.org` to check whether it has a version
of one of your gems more specific to your platform.

This problem is also not just limited to the `"java"` platform.
A similar (common) problem can happen when developing on Windows
and deploying to Linux, or even when developing on OSX and
deploying to Linux.

If you know for sure that the gems packaged in `vendor/cache`
are appropriate for the platform you are on, you can run
`fundle install --local` to skip checking for more appropriate
gems, and just use the ones in `vendor/cache`.

One way to be sure that you have the right platformed versions
of all your gems is to run `fundle package` on an identical
machine and check in the gems. For instance, you can run
`fundle package` on an identical staging box during your
staging process, and check in the `vendor/cache` before
deploying to production.
